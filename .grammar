statement -> expression | letStatement;
letStatement -> "let" ID ("=" expression)? ;

expression -> binary ;
binary -> coordinative ;

coordinative -> equality ( ( "and" | "or") equality)* ;
equality -> comparative ( ( "!=" | "==" ) comparative )* ;

comparative -> additive ( ( "<" | ">" | "<=" | ">=" ) additive )* ;
additive -> multiplicative ( ( "-" | "+" ) multiplicative )* ;

multiplicative -> unary ( ( "/" | "*" | "%" ) unary )* ;
unary -> ( "!" | "-" ) unary | primary ;

primary -> literal | ID | "(" expression ")" ;
literal -> NUMBER | STR | CHAR | IDENT | "true" | "false" ;

