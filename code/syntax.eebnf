# eebnf is an extended ebnf (made by me) which is extend bnf for writing lang syntax

<digit> = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";

<int> = <digit> { <digit> };
<float> = <int> "."  <int>;
<num> = <int> | <float>;

<char> = <ASCII_CHAR>;
<str> = { <char> };

<type> = <str> | <char> | <num> | <int> | <float>;

<operator> = "+" | "-" | "*" | "^" | "/" | "%" | "<" | ">" | "==" | "&&" | "||";
<listed_or operator> = "|=" | "|<" | "|>";
<unary operator> = "+" | "-";

# listed_or cannot be in the top level can only be used with '=='
<listed_or expression> = <type> <listed_or> (<type> | <listed_or expression>)

<binary expression> = <type> <operator> <type> | ([<listed_or expression>] if <operator> is "==");

<unary expression> = <unary operator> <type>;

<equal> = "=";
<vars> = "set" [<type>] <str> <equal> <type> // set vartype varname = varvalue
<methods> "set" [<type>] <str> "(" { [<type>] <str> } ")" {" {<expression>} "} // set methodtype methodname(args) { methodbody }

<functions> "set" [<type>] <str> { [<type>] <str> } <equal> {<expression>} 
/* functions is a mix of vars and methods a function doesnt need () or a body {}
in turn a function cannot return oits return val(cannot be void) is the last mentioned var also doesnt need args in () instead the next val is the next arg*/
/*
  # keywords can be added to give syntax to functions (has to be choosen from a list)
  set int add int x,keyword to, int y =
    x + y
  set int add(int x, int y) {
    return  x + y
  }
  add 1 to 5
  add(1,5)
*/
